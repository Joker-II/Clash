# 策略组
proxy-groups:
 # 选择`🎯 全球直连`为测试本地网络（运营商网络速度和 IPv6 支持情况），可选择其它节点用于测试机场节点速度和 IPv6 支持情况
  - {name: 📈 网络测试, type: select, proxies: [🎯 大陆直连, 🇭🇰 香港, 🇹🇼 台湾, 🇯🇵 日本, 🇺🇸 美国, 🇸🇬 新加坡]}
  
  # 手动选择国家或地区节点；根据“国家或地区策略组”名称对 `proxies` 值进行增删改，须一一对应
  - {name: 🚀 地区选择, type: select, proxies: [🇭🇰 香港, 🇹🇼 台湾, 🇯🇵 日本, 🇺🇸 美国, 🇸🇬 新加坡]}

  # 若机场的 UDP 质量不是很好，导致某游戏无法登录或进入房间，可以添加 `disable-udp: true` 配置项解决
  - {name: 🐟 漏网之鱼, type: select, proxies: [🚀 地区选择, 🎯 大陆直连]}

  - {name: 📢 Google, type: select, proxies: [🇭🇰 香港, 🇺🇸 美国, 🇸🇬 新加坡]}
  
  - {name: 🎬 Netflix, type: select, proxies: [指定节点]}
  
  - {name: 🎵 Spotify, type: select, proxies: [🇭🇰 香港, 🇯🇵 日本]}
   
  - {name: 📲 Telegram, type: select, proxies: [🇭🇰 香港, 🇹🇼 台湾]}

  - {name: TikTok, type: select, proxies: [🇭🇰 香港, 🇹🇼 台湾]}

  - {name: OpenAi, type: select, proxies: [🇭🇰 香港, 🇹🇼 台湾]}

  - {name: 🪜 Global, type: select, proxies: [ 🇯🇵 日本, 🇺🇸 美国, 🇸🇬 新加坡]}

  - {name: Ⓜ️ Microsoft, type: select, proxies: [🎯 大陆直连, 🚀 地区选择]}

  - {name: 🛑 广告拦截, type: select, proxies: [REJECT]}

  - {name: 🎯 大陆直连, type: select, proxies: [DIRECT]}

  # ----------------国家或地区策略组---------------------
  
  # 节点负载均衡，即将请求均匀分配到多个节点上，优点是更稳定，速度可能有提升；将相同顶级域名的请求分配给策略组内的同一个代理节点；推荐在节点复用比较多的情况下使用
  #- {name: 🇹🇼 台湾, type: load-balance, strategy: consistent-hashing, lazy: true, use: [🛫 我的订阅 Ⅰ, 🛫 我的订阅 Ⅱ], filter: "(?i)台|tw|taiwan"}
  
  # 自动选择节点，即按照 url 测试结果使用延迟最低的节点；测试后容差大于 100ms 才会切换到延迟低的那个节点；未选择到当前策略组时不会进行延迟测试；筛选出“香港”节点，支持正则表达式
  
  - {name: 🇭🇰 香港, type: url-test, tolerance: 100, lazy: true, use: [🛫 我的订阅 Ⅰ, 🛫 我的订阅 Ⅱ], filter: "(?i)港|hk|hongkong|hong kong"}

  - {name: 🇹🇼 台湾, type: url-test, tolerance: 100, lazy: true, use: [🛫 我的订阅 Ⅰ, 🛫 我的订阅 Ⅱ], filter: "(?i)台|tw|taiwan"}

  - {name: 🇯🇵 日本, type: url-test, tolerance: 100, lazy: true, use: [🛫 我的订阅 Ⅰ, 🛫 我的订阅 Ⅱ], filter: "(?i)日本|jp|japan"}

  - {name: 🇺🇸 美国, type: url-test, tolerance: 100, lazy: true, use: [🛫 我的订阅 Ⅰ, 🛫 我的订阅 Ⅱ], filter: "(?i)美|us|unitedstates|united ates"}

  - {name: 🇸🇬 新加坡, type: url-test, tolerance: 100, lazy: true, use: [🛫 我的订阅 Ⅰ, 🛫 我的订阅 Ⅱ], filter: "(?i)新|sg|singapore"}

  - {name: 指定节点, type: select, lazy: true, use: [🛫 我的订阅 Ⅰ, 🛫 我的订阅 Ⅱ], filter: "(?i)台|tw|taiwan|日本|jp|japan|美|us|unitedstates|united states"} 

# 规则集（yaml 文件每天自动更新）
rule-providers:
  ads:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/DustinWin/ruleset_geodata@clash/ads.yaml"
    path: ./ruleset/ads.yaml
    interval: 86400

 Netflix:
    type: http
    behavior: classical
    url: "https://raw.githubusercontent.com/Joker-II/Clash/Rule/Netflix.yaml"
    path: ./ruleset/Netflix.yaml
    interval: 86400

 Spotify:
    type: http
    behavior: classical
    url: "https://raw.githubusercontent.com/Joker-II/Clash/Rule/Spotify.yaml"
    path: ./ruleset/Spotify.yaml
    interval: 86400

 Global:
    type: http
    behavior: classical
    url: "https://raw.githubusercontent.com/Joker-II/Clash/Rule/Global.yaml"
    path: ./ruleset/Global.yaml
    interval: 86400

 TikTok:
    type: http
    behavior: classical
    url: "https://raw.githubusercontent.com/Joker-II/Clash/Rule/TikTok.yaml"
    path: ./ruleset/TikTok.yaml
    interval: 86400

 Google:
    type: http
    behavior: classical
    url: "https://raw.githubusercontent.com/Joker-II/Clash/Rule/Google.yaml"
    path: ./ruleset/Google.yaml
    interval: 86400

 Microsoft:
    type: http
    behavior: classical
    url: "https://raw.githubusercontent.com/Joker-II/Clash/Rule/Microsoft.yaml"
    path: ./ruleset/Microsoft.yaml
    interval: 86400

 Telegram:
    type: http
    behavior: classical
    url: "https://raw.githubusercontent.com/Joker-II/Clash/Rule/Telegram.yaml"
    path: ./ruleset/Telegram.yaml
    interval: 86400

 OpenAi:
    type: http
    behavior: classical
    url: "https://raw.githubusercontent.com/Joker-II/Clash/Rule/OpenAi.yaml"
    path: ./ruleset/OpenAi.yaml
    interval: 86400

# 规则
rules:
  - RULE-SET,ads,🛑 广告拦截
  - RULE-SET,Netflix,🎬 Netflix
  - RULE-SET,Spotify,🎵 Spotify
  - RULE-SET,Microsoft,Ⓜ️ Microsoft
  - RULE-SET,Google,📢 Google
  - RULE-SET,Global,🪜 Global
  - RULE-SET,Telegramip,📲 Telegram
  - RULE-SET,TikTok,TikTok
  - RULE-SET,OpenAi,OpenAi
  - MATCH,🐟 漏网之鱼
